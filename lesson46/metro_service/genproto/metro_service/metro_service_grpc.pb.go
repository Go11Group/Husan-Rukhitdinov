// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: metro_service.proto

package metro_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MetroServiceClient is the client API for MetroService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetroServiceClient interface {
	Cards(ctx context.Context, in *Card, opts ...grpc.CallOption) (*Void, error)
	Stations(ctx context.Context, in *Station, opts ...grpc.CallOption) (*Void, error)
	Terminals(ctx context.Context, in *Terminal, opts ...grpc.CallOption) (*Void, error)
	Transactions(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Void, error)
}

type metroServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetroServiceClient(cc grpc.ClientConnInterface) MetroServiceClient {
	return &metroServiceClient{cc}
}

func (c *metroServiceClient) Cards(ctx context.Context, in *Card, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/metro_service.Metro_service/Cards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metroServiceClient) Stations(ctx context.Context, in *Station, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/metro_service.Metro_service/Stations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metroServiceClient) Terminals(ctx context.Context, in *Terminal, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/metro_service.Metro_service/Terminals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metroServiceClient) Transactions(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/metro_service.Metro_service/Transactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetroServiceServer is the server API for MetroService service.
// All implementations must embed UnimplementedMetroServiceServer
// for forward compatibility
type MetroServiceServer interface {
	Cards(context.Context, *Card) (*Void, error)
	Stations(context.Context, *Station) (*Void, error)
	Terminals(context.Context, *Terminal) (*Void, error)
	Transactions(context.Context, *Transaction) (*Void, error)
	mustEmbedUnimplementedMetroServiceServer()
}

// UnimplementedMetroServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMetroServiceServer struct {
}

func (UnimplementedMetroServiceServer) Cards(context.Context, *Card) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cards not implemented")
}
func (UnimplementedMetroServiceServer) Stations(context.Context, *Station) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stations not implemented")
}
func (UnimplementedMetroServiceServer) Terminals(context.Context, *Terminal) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Terminals not implemented")
}
func (UnimplementedMetroServiceServer) Transactions(context.Context, *Transaction) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transactions not implemented")
}
func (UnimplementedMetroServiceServer) mustEmbedUnimplementedMetroServiceServer() {}

// UnsafeMetroServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetroServiceServer will
// result in compilation errors.
type UnsafeMetroServiceServer interface {
	mustEmbedUnimplementedMetroServiceServer()
}

func RegisterMetroServiceServer(s grpc.ServiceRegistrar, srv MetroServiceServer) {
	s.RegisterService(&MetroService_ServiceDesc, srv)
}

func _MetroService_Cards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Card)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetroServiceServer).Cards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metro_service.Metro_service/Cards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetroServiceServer).Cards(ctx, req.(*Card))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetroService_Stations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Station)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetroServiceServer).Stations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metro_service.Metro_service/Stations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetroServiceServer).Stations(ctx, req.(*Station))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetroService_Terminals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Terminal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetroServiceServer).Terminals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metro_service.Metro_service/Terminals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetroServiceServer).Terminals(ctx, req.(*Terminal))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetroService_Transactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetroServiceServer).Transactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metro_service.Metro_service/Transactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetroServiceServer).Transactions(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

// MetroService_ServiceDesc is the grpc.ServiceDesc for MetroService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetroService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "metro_service.Metro_service",
	HandlerType: (*MetroServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Cards",
			Handler:    _MetroService_Cards_Handler,
		},
		{
			MethodName: "Stations",
			Handler:    _MetroService_Stations_Handler,
		},
		{
			MethodName: "Terminals",
			Handler:    _MetroService_Terminals_Handler,
		},
		{
			MethodName: "Transactions",
			Handler:    _MetroService_Transactions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metro_service.proto",
}
